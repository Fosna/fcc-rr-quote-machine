{"version":3,"sources":["actions.js","QuoteBox.js","QuoteBoxContainer.js","quoteReducer.js","App.js","serviceWorker.js","index.js"],"names":["loadQuotes","dispatch","type","axios","get","then","res","loadQuotesSuccess","data","quotes","catch","error","loadQuotesFailed","QuoteBox","props","react_default","a","createElement","id","className","quote","author","onClick","nextQuote","QuoteBoxContainer","componentDidMount","_this","render","src_QuoteBox","Component","defaultProps","connect","state","Object","objectSpread","current","randIndex","Math","floor","random","length","defaultState","store","createStore","arguments","undefined","action","assign","console","applyMiddleware","thunkMiddleware","createLogger","App","react_redux_es","src_QuoteBoxContainer","href","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d696a6b7.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const NEXT_QUOTE = 'NEXT_QUOTE';\nexport const nextQuote = () => ({\n    type: NEXT_QUOTE,\n});\n\nconst getQuotes = () => axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json');\n\nexport const LOAD_QUOTES = 'LOAD_QUOTES';\nexport const loadQuotes = () => dispatch => {\n    dispatch({\n        type: LOAD_QUOTES,\n    });\n    getQuotes()\n        .then(res => dispatch(loadQuotesSuccess(res.data.quotes)))\n        .catch(error => dispatch(loadQuotesFailed(error)));\n};\n\nexport const LOAD_QUOTES_SUCCESS = 'LOAD_QUOTES_SUCCESS';\nexport const loadQuotesSuccess = (quotes) => ({\n    type: LOAD_QUOTES_SUCCESS,\n    quotes,\n});\n\nexport const LOAD_QUOTES_FAILED = 'LOAD_QUOTES_FAILED';\nexport const loadQuotesFailed = (error) => ({\n    type: LOAD_QUOTES_FAILED,\n    error,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst QuoteBox = props => (\n  <div id=\"quote-box\">\n    <div className=\"quote-text\">\n      <i className=\"fa fa-quote-left\"> </i><span id=\"text\">{props.quote}</span>\n    </div>\n    <div className=\"quote-author\">\n      - <span id=\"author\">{props.author}</span>\n    </div>\n    <div className=\"buttons\">\n      <button className=\"button\" id=\"new-quote\" onClick={props.nextQuote}>New quote</button>\n    </div>\n  </div>\n);\n\nQuoteBox.propTypes = {\n  quote: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n  nextQuote: PropTypes.func.isRequired,\n}\n\nexport default QuoteBox;\n","import React, { Component } from 'react';\nimport { loadQuotes, nextQuote } from './actions';\nimport { connect } from 'react-redux';\nimport QuoteBox from './QuoteBox';\n\n\nclass QuoteBoxContainer extends Component {\n  componentDidMount = () => this.props.loadQuotes();\n\n  render = () => <QuoteBox\n      nextQuote={this.props.nextQuote}\n      quote={this.props.quote}\n      author={this.props.author}\n    />;\n}\n\nQuoteBoxContainer.defaultProps = {\n  quote: '...',\n  author: 'unknown',\n};\n\nconst mapStateToProps = state => ({\n  ...state.current,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loadQuotes: () => dispatch(loadQuotes()),\n  nextQuote: () => dispatch(nextQuote()),\n});\n\nexport default connect(\n    mapStateToProps, \n    mapDispatchToProps\n)(QuoteBoxContainer);\n","import { \n    NEXT_QUOTE, \n    LOAD_QUOTES_SUCCESS,\n    LOAD_QUOTES_FAILED,\n} from \"./actions\";\n\nconst nextQuote = (quotes) => {\n    const randIndex = Math.floor(Math.random() * Math.floor(quotes.length));\n    const randQuote = { ...quotes[randIndex] } ;\n    return randQuote;\n};\n\nconst defaultState = {\n    quotes: [],\n    current: {\n        quote: '...',\n        author: 'unknown',\n    },\n};\n\nexport default (state = defaultState, action) => {\n\n    switch(action.type) {\n        case LOAD_QUOTES_SUCCESS:\n            return Object.assign(\n                {}, \n                state, \n                { \n                    quotes: action.quotes,\n                    current: nextQuote(action.quotes), \n                }\n            ); \n        case LOAD_QUOTES_FAILED:\n            console.error(action.error);\n            return state;\n        case NEXT_QUOTE: \n            return Object.assign({},\n                state, \n                { \n                    current: nextQuote(state.quotes), \n                }\n            );\n        default:\n            return state;\n    }\n\n};\n","import React, { Component } from 'react';\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport QuoteBoxContainer from './QuoteBoxContainer';\nimport quoteReducer from './quoteReducer';\nimport './App.css';\n\nconst store = createStore(\n  quoteReducer, \n  applyMiddleware(\n    thunkMiddleware, \n    createLogger()\n  )\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div id=\"wrapper\">\n          <QuoteBoxContainer />\n          <div className=\"footer\"> by <a href=\"#\">Fosna</a></div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
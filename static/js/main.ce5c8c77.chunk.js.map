{"version":3,"sources":["QuoteBox.js","QuoteBoxContainer.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","react_default","a","createElement","id","className","quote","author","title","target","onClick","nextQuote","QuoteBoxContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","getQuotes","then","res","setState","quotes","data","axios","get","randIndex","Math","floor","random","state","length","randQuote","Promise","resolve","reject","current","objectSpread","e","render","src_QuoteBox","autor","index","Component","App","src_QuoteBoxContainer","href","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQA6BeA,EA1BE,SAAAC,GAAK,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,oBAAb,KAAqCJ,EAAAC,EAAAC,cAAA,QAAMC,GAAG,QAAQJ,EAAMM,QAE9DL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAf,KACIJ,EAAAC,EAAAC,cAAA,QAAMC,GAAG,UAAUJ,EAAMO,SAE7BN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,SAASD,GAAG,cAAcI,MAAM,oBAAoBC,OAAO,UACtER,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBAEfJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,SAASD,GAAG,eAAeI,MAAM,6BAA6BC,OAAO,UAChFR,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAEfJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASD,GAAG,YAAYM,QAASV,EAAMW,WAAzD,iCCqCSC,cAlDb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KAeRoB,kBAAoB,kBAAMP,EAAKQ,YAC5BC,KAAK,SAAAC,GAAG,OAAIV,EAAKW,SAAS,CAAEC,OAAQF,EAAIG,KAAKD,WAC7CH,KAAKT,EAAKF,YAlBME,EAoBnBQ,UAAY,kBAAMM,IAAMC,IAAI,2IApBTf,EAsBnBF,UAAY,WACV,IAAMkB,EAAYC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMlB,EAAKoB,MAAMR,OAAOS,SAEpEC,EAAYtB,EAAKoB,MAAMR,OAAOI,GAGpC,OAAO,IAAIO,QAAQ,SAACC,EAASC,GAC3B,IACEzB,EAAKW,SAAS,CACVe,QAAQzB,OAAA0B,EAAA,EAAA1B,CAAA,GACHqB,IAGP,kBAAME,EAAQxB,EAAKoB,SAErB,MAAMQ,GACNH,EAAOG,OAtCM5B,EA2CnB6B,OAAS,kBAAMzC,EAAAC,EAAAC,cAACwC,EAAD,CACXhC,UAAWE,EAAKF,UAChBL,MAAOO,EAAKoB,MAAMM,QAAQjC,MAC1BC,OAAQM,EAAKoB,MAAMM,QAAQhC,UA3C7BM,EAAKoB,MAAQ,CACXR,OAAQ,CAAC,CACPnB,MAAO,MACPsC,MAAO,YAETC,MAAO,EACPN,QAAS,CACPjC,MAAO,MACPC,OAAQ,YAXKM,6BADWiC,aCWjBC,0LATX,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAf,OAA4BJ,EAAAC,EAAAC,cAAA,KAAG8C,KAAK,KAAR,kBALlBH,cCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASb,OAAOzC,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.ce5c8c77.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst QuoteBox = props => (\n  <div id=\"quote-box\">\n    <div className=\"quote-text\">\n      <i className=\"fa fa-quote-left\"> </i><span id=\"text\">{props.quote}</span>\n    </div>\n    <div className=\"quote-author\">\n      - <span id=\"author\">{props.author}</span>\n    </div>\n    <div className=\"buttons\">\n      <a className=\"button\" id=\"tweet-quote\" title=\"Tweet this quote!\" target=\"_blank\">\n        <i className=\"fa fa-twitter\"></i>\n      </a>\n      <a className=\"button\" id=\"tumblr-quote\" title=\"Post this quote on tumblr!\" target=\"_blank\">\n        <i className=\"fa fa-tumblr\"></i>\n      </a>\n      <button className=\"button\" id=\"new-quote\" onClick={props.nextQuote}>New quote</button>\n    </div>\n  </div>\n);\n\nQuoteBox.propTypes = {\n  quote: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n  nextQuote: PropTypes.func.isRequired,\n}\n\nexport default QuoteBox;\n","import React, { Component } from 'react';\nimport QuoteBox from './QuoteBox';\nimport axios from 'axios';\n\nclass QuoteBoxContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quotes: [{\n        quote: '...',\n        autor: 'unknown',\n      }],\n      index: 0,\n      current: {\n        quote: '...',\n        author: 'unknown',\n      }\n    };\n  }\n\n  componentDidMount = () => this.getQuotes()\n    .then(res => this.setState({ quotes: res.data.quotes }))\n    .then(this.nextQuote);\n\n  getQuotes = () => axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json');\n\n  nextQuote = () => {\n    const randIndex = Math.floor(Math.random() * Math.floor(this.state.quotes.length));\n    \n    const randQuote = this.state.quotes[randIndex];\n\n    // To check what's the new state.\n    return new Promise((resolve, reject) => {\n      try {\n        this.setState({\n            current: {\n              ...randQuote\n            },\n          }, \n          () => resolve(this.state)\n        );\n      } catch(e) {\n        reject(e);\n      }\n    });\n  }\n\n  render = () => <QuoteBox\n      nextQuote={this.nextQuote}\n      quote={this.state.current.quote}\n      author={this.state.current.author}\n    />;\n}\n\nexport default QuoteBoxContainer;\n","import React, { Component } from 'react';\nimport QuoteBoxContainer from './QuoteBoxContainer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"wrapper\">\n        <QuoteBoxContainer />\n        <div className=\"footer\"> by <a href=\"#\">Fosna</a></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}